<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>客星の明るい夜</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cocolate.cc/"/>
  <updated>2018-10-10T18:06:54.000Z</updated>
  <id>http://cocolate.cc/</id>
  
  <author>
    <name>cocolate</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ISSO评论系统折腾记录</title>
    <link href="http://cocolate.cc/2018/02/24/ISSO%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/"/>
    <id>http://cocolate.cc/2018/02/24/ISSO评论系统折腾记录/</id>
    <published>2018-02-24T08:37:57.000Z</published>
    <updated>2018-10-10T18:06:54.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>在过去的一年，许多评论系统相继扑街了。这个博客也没有评论系统裸奔了不少时间。<br>国内的服务商都苟延残喘，而外国的则难以触及。<br>在可见的未来由于政策与环境原因，国内想来是没什么能用的评论系统了，是时候着眼开源方案了。</p><a id="more"></a><p>现在较为成熟的方案有</p><ul><li><a href="https://github.com/imsun/gitment" target="_blank" rel="noopener">gitment</a> 基于github issue 系统与API</li><li><a href="https://valine.js.org/quickstart.html" target="_blank" rel="noopener">Valine</a> 利用 learn cloud 的免费对象存储开发的方案</li><li><a href="https://posativ.org/isso/" target="_blank" rel="noopener">ISSO</a> 小果然翁，传统后端方案，自给自足型</li></ul><p>其实对于不怎么折腾的人，第一个与第二个方案开箱即用体验很好。<br>但这两个方案都有致命的缺陷，由于依赖公共服务而必须在前端暴露 <code>apiKey</code>，这简直不能忍。<br>做个比喻的话，就像出门不锁门一样，叫人浑身难受。</p><p>当然这两个方案可以通过自己架设代理处理请求来确保安全性，但这样就又变成了的后端方案。相比之下，当然是先从现成的轮子着手。</p><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p><a href="https://posativ.org/isso/docs/install/" target="_blank" rel="noopener">官网</a>提供了<code>pip</code>，可执行文件，和源码安装三种方案。<br>官网上的安装步骤比较详细，这里就不多赘述，准备好环境就好。当然，此外也有人整合了<a href="https://hub.docker.com/r/wonderfall/isso/" target="_blank" rel="noopener">docker方案</a>，开箱即用。</p><p>当然如果仅仅是这样，这篇文章就不会诞生了。现有的ISSO版本为<code>0.10.6</code>,是16年释出的。诸如gravater头像、邮箱提醒、回复等都评论系统的主流功能都未实装。虽然在这两年里，有开发者完成了这些功能并提交给ISSO，但最新的master版本，不出意料并不能顺利运行。下一个release版本看上去也是遥遥无期，没办法，需要自己动手，丰衣足食了。</p><h2 id="折腾记录"><a class="markdownIt-Anchor" href="#折腾记录"></a> 折腾记录</h2><p>现在探查的时候，在网上发现了一个<a href="https://github.com/Hscpro/isso" target="_blank" rel="noopener">修改版本</a>，实现了gravatar头像功能，从他开始，再将emial功能的request并入代码。</p><p>当然事情不会这么一帆风顺，在ISSO停更的时间里，他所用的markdown渲染器更新了，如果发生了下述报错，需要修改渲染方法的参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">File &quot;/home/pi/ISSO/isso/utils/html.py&quot;, line 70, in Markdown</span><br><span class="line">  md = misaka.Markdown(renderer, extensions=extensions)</span><br><span class="line">File &quot;misaka.pyx&quot;, line 194, in misaka.Markdown.__cinit__ (src/misaka.c:1481)</span><br><span class="line">  TypeError: an integer is required</span><br></pre></td></tr></table></figure><p>需要将extensions的字符串参数改为常量参数</p><figure class="highlight python"><figcaption><span>html.py:46</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Markdown</span><span class="params">(extensions=<span class="params">(<span class="string">"strikethrough"</span>, <span class="string">"superscript"</span>, <span class="string">"autolink"</span>,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">                         <span class="string">"fenced-code"</span>)</span>)</span>:</span></span><br><span class="line">    renderer = Unofficial()</span><br><span class="line">    md = misaka.Markdown(renderer, extensions=extensions)</span><br></pre></td></tr></table></figure><p>to</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Markdown</span><span class="params">()</span>:</span></span><br><span class="line">    renderer = Unofficial()</span><br><span class="line">    md = misaka.Markdown(renderer, misaka.EXT_STRIKETHROUGH|misaka.EXT_SUPERSCRIPT|   misaka.EXT_AUTOLINK|misaka.EXT_FENCED_CODE)</span><br></pre></td></tr></table></figure><p>ISSO使用SMTP邮件服务发送邮件，对于大多数的邮件服务供应商，都存在发信频率限制，当出现下述错误时，就要注意分离发信请求的时间间隔了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">File &quot;/home/pi/ISSO/isso/ext/notifications.py&quot;, line 84, in __enter__</span><br><span class="line">  v = self._sslobj.read(len, buffer)</span><br><span class="line">socket.timeout: The read operation timed out</span><br></pre></td></tr></table></figure><p>ISSO本身并没有为短时间多次发生邮件设计，这里需要将邮件提醒模块改为队列形式</p><figure class="highlight python"><figcaption><span>notifications.py 178</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_retry</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">not</span> self.mailQ.empty()):</span><br><span class="line">        mail = self.mailQ.get()</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                elf._sendmail(mail[<span class="number">0</span>], mail[<span class="number">1</span>], mail[<span class="number">2</span>])</span><br><span class="line">                time.sleep(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">except</span> smtplib.SMTPConnectError:</span><br><span class="line">                time.sleep(<span class="number">60</span>)</span><br></pre></td></tr></table></figure><p>第一次有了自己的博客，第一次搭了自己的评论系统，可是。。ISSO的邮件提醒还是简陋的文字版<br>为了视觉的统一性，这里加入了邮件模板，并修改了邮件生成机制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">format</span><span class="params">(self, thread, comment, admin=False)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">safesub</span><span class="params">(dict)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__missing__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">'&#123;'</span> + key + <span class="string">'&#125;'</span></span><br><span class="line">    <span class="comment"># admin: url title comments author ipaddr delete</span></span><br><span class="line">    <span class="comment"># reply: url title comments author</span></span><br><span class="line">    author = comment[<span class="string">"author"</span>] <span class="keyword">or</span> <span class="string">"Anonymous"</span></span><br><span class="line">    <span class="keyword">if</span> comment[<span class="string">"author"</span>] <span class="keyword">and</span> comment[<span class="string">"website"</span>]:</span><br><span class="line">        author = <span class="string">"&lt;a href=\"%s\"&gt;%s&lt;/a&gt;"</span> % (comment[<span class="string">"website"</span>],</span><br><span class="line">                                            comment[<span class="string">"author"</span>])</span><br><span class="line">    <span class="keyword">if</span> comment[<span class="string">"email"</span>]:</span><br><span class="line">        author += <span class="string">" &lt;%s&gt;"</span> % comment[<span class="string">"email"</span>]</span><br><span class="line"></span><br><span class="line">    comments = comment[<span class="string">"text"</span>]</span><br><span class="line">    title = unquote(thread[<span class="string">"uri"</span>], encoding=<span class="string">'utf-8'</span>, errors=<span class="string">'replace'</span>)</span><br><span class="line">    title=title.split(<span class="string">'/'</span>)[<span class="number">-2</span>]</span><br><span class="line">    url = local(<span class="string">"origin"</span>) + thread[<span class="string">"uri"</span>] + <span class="string">"#isso-%i"</span> % comment[<span class="string">"id"</span>]</span><br><span class="line">    ipaddr = comment[<span class="string">"remote_addr"</span>]</span><br><span class="line">    delete = local(</span><br><span class="line">        <span class="string">"host"</span>) + <span class="string">"/id/%i"</span> % comment[<span class="string">"id"</span>] + <span class="string">"/delete/"</span> + self.isso.sign(</span><br><span class="line">            comment[<span class="string">"id"</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (admin):</span><br><span class="line">        <span class="keyword">return</span> self.manageText.format_map(safesub(vars()))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> self.notifyText.format_map(safesub(vars()))</span><br></pre></td></tr></table></figure><p>需要注意的是，css语法中的<code>{</code>,<code>}</code>与python的模板字符串系列方法冲突，需要写成双大括号来忽略</p><h2 id="尾声"><a class="markdownIt-Anchor" href="#尾声"></a> 尾声</h2><p>到这里ISSO改造算是告一段落了，诸位可以在这里下载源码自行安装<br><a href="https://github.com/oodavy41/isso" target="_blank" rel="noopener">https://github.com/oodavy41/isso</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在过去的一年，许多评论系统相继扑街了。这个博客也没有评论系统裸奔了不少时间。&lt;br&gt;
国内的服务商都苟延残喘，而外国的则难以触及。&lt;br&gt;
在可见的未来由于政策与环境原因，国内想来是没什么能用的评论系统了，是时候着眼开源方案了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="isso" scheme="http://cocolate.cc/tags/isso/"/>
    
      <category term="Linux" scheme="http://cocolate.cc/tags/Linux/"/>
    
      <category term="Python" scheme="http://cocolate.cc/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>记一次canvas粒子特效制作</title>
    <link href="http://cocolate.cc/2017/05/13/%E8%AE%B0%E4%B8%80%E6%AC%A1canvas%E7%B2%92%E5%AD%90%E7%89%B9%E6%95%88%E5%88%B6%E4%BD%9C/"/>
    <id>http://cocolate.cc/2017/05/13/记一次canvas粒子特效制作/</id>
    <published>2017-05-13T13:18:05.000Z</published>
    <updated>2018-01-14T12:12:50.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>最近毕设相关的项目制作终于告一段落了，人闲了下来，折腾的心也开始蠢蠢欲动。于是准备着手换掉看腻了的hexo的主题。不过当这篇文章问世时因该会发布在已经实装的新主题里了。</p><p>这次也准备往博客里加点coool的特效什么的，考虑了几个方案，最后选择用canvas来做，所以本文就是canvas动画的制作记录。</p><a id="more"></a><h2 id="前言废话干货在正文"><a class="markdownIt-Anchor" href="#前言废话干货在正文"></a> 前言<s>废话，干货在正文</s></h2><p>相信诸君已经看到了，这个主题捏他了挺多東风谷早苗的元素，那么特效肯定就从她的符卡里参考啦<s>早苗教你画星星</s></p><p>但是并不能选太张扬、面积过大、太耀眼的，毕竟这是个博客，喧宾夺主就不好了。所以最后选了<code>[一脉单传的弹幕]</code>中的一部分(一颗星),这个符卡弹幕单个看比较朴素，运动起来倒有种特别的美感 <s>而且很难</s> ，放这里再合适不过了。</p><p>原本也有考虑过用svg动画，因为性能消耗更低，不过弹幕类似粒子，canvas更容易适配。最后性能也没有明显的问题，即使在手机上也能正常播放。</p><hr><h2 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h2><p>这个特效的最后效果可以在博客标题附近看到，当然手机端是不显示的，请使用电脑、平板或电脑模式打开页面。<br>特效的详细代码可以在<a href="https://github.com/oodavy41/MyToysBox/tree/master/NightWithNovae" target="_blank" rel="noopener">这里</a>看到</p><p>canvas动画最大的特点就是，它的帧与帧之间是上下文无关的，每一帧都需要自己控制整个画面。这与HTML日常放个标记就好的使用习惯差异较大，不熟悉的话得适应一下。当然，现在也有诸如脏矩形之类的技术，不用重绘全部画面，可以节省了性能，但它们在此意义不大。</p><h3 id="canvas的使用"><a class="markdownIt-Anchor" href="#canvas的使用"></a> canvas的使用</h3><p>关于canvas的使用教程有很多，这里就简要说明下。canvas标签被渲染后，需要获取一个上下文来控制他的全部状态。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cc = <span class="built_in">document</span>.getElementById(<span class="string">'sanae-canvas'</span>);</span><br></pre></td></tr></table></figure><p>它就是这个canvas的画笔，可以用它绘制点线面，各种图形，以及图片。</p><h3 id="五星路径"><a class="markdownIt-Anchor" href="#五星路径"></a> 五星路径</h3><p>既然canvas不维护绘制对象的状态，这就需要我们自己维护了。因为本次特效也涉及倒放<s>鬼畜</s>等情况，所以这里用一个数字控制进度状态，就和css的动画百分比类似。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">requestAnimationFrame(draw);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">var</span> points=...<span class="comment">//需要绘制的点坐标集合</span></span><br><span class="line">    <span class="keyword">var</span> progerss+=<span class="number">0.1</span>;</span><br><span class="line">    <span class="keyword">var</span> map = [<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (progress &gt; i) &#123;</span><br><span class="line">            point = lerp(points[map[i]], points[map[i + <span class="number">1</span>]], <span class="built_in">Math</span>.min(progress - i, <span class="number">1</span>));</span><br><span class="line">            cc.lineTo(w + point[<span class="number">0</span>], h - point[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码是每一帧中绘制五角星的代码，可以看到，这里的<code>progress</code>随着时间增加，而<code>points</code>中则储存五角星的五个点，<code>map</code>代表画线顺序。可以看到随着<code>progress</code>的增加，我们的五角星也渐渐完整了。</p><p>上面的<code>requestAnimationFrame</code>函数是浏览器中自带的动画函数，顾名思义，他会定期调用传入的函数，相比其他的定时函数，它对动画作了优化，会将帧数控制在合理的范围。</p><h3 id="旋转与平移"><a class="markdownIt-Anchor" href="#旋转与平移"></a> 旋转与平移</h3><p>你当然可以自己控制绘制内容来实现canvas中的旋转或平移，但canvas也有一些更加便捷的做法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cc.translate(x,y);</span><br><span class="line">cc.rotate(angle);</span><br></pre></td></tr></table></figure><p>之前说过canvas的上下文是个画笔，上面两句就是旋转与平移的方法，他们会改编画笔的 <strong>坐标系原点</strong> 转换的参考系则是之前的上下文状态。</p><p>当然画笔的坐标系也能恢复原点，不然操作过多就难以控制。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cc.save();</span><br><span class="line">cc.restore();</span><br></pre></td></tr></table></figure><p>上面两句分别是保存和读取上下文状态，值得注意的是它内部是堆栈结构，可以多层次使用。</p><h3 id="粒子效果"><a class="markdownIt-Anchor" href="#粒子效果"></a> 粒子效果</h3><p>终于开始画弹幕了，绘制粒子效果，需要处理的对象瞬间就高了几个数量级，虽然并非不能，但手动一个个画出粒子，他们还在运动，肯定是吃力不讨好的事情。</p><p>在游戏行业粒子特效已经非常成熟了，这里我们可以稍稍借鉴下。其实在广义的前端中，这一概念都在被大范围应用，那就是生命周期。</p><p>相比前端组件的生命周期，粒子的生命周期更容易理解，生成 -&gt; 运动 -&gt; 消亡。要实现这些功能，独立写一个粒子类是最简单的。</p><p>生成和消亡都是一行代码的事，我们的主要工作在于对粒子运动的处理。鉴于粒子运动的代码，与他的运动方式有关，某些时候会相当复杂，这里只给出粒子类的大致结构，详细可以参考我上文给出代码的<code>starObj</code>类实现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">starObj</span></span>&#123;</span><br><span class="line">    constuctor()&#123;</span><br><span class="line">        <span class="comment">//粒子的参数设定，主要涉及运动轨迹相关</span></span><br><span class="line">    &#125;</span><br><span class="line">    reset()&#123;</span><br><span class="line">        <span class="comment">//粒子的初始化设置，便于复用</span></span><br><span class="line">    &#125;</span><br><span class="line">    move()&#123;</span><br><span class="line">        <span class="comment">//粒子的运动处理，会在draw中每帧调用</span></span><br><span class="line">    &#125;</span><br><span class="line">    draw(cc)&#123;</span><br><span class="line">        move();</span><br><span class="line">        <span class="comment">//在处理完运动之后，传入canvas上下文并绘制这个粒子</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在粒子对象数量膨胀后，生成与消亡产生的gc消耗会很大，从而影响性能。在这里我们可以引入对象池，将消亡的粒子对象保存起来不取绘制，在需要时进行<code>reset</code>初始化，减小gc性能开销。</p><p>这里给出简单的对象池实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//star factory</span></span><br><span class="line"><span class="keyword">var</span> twinklying = [];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addStar</span>(<span class="params">flag, x, y, angle</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> star;</span><br><span class="line">    <span class="keyword">if</span> (twinklying.length &lt; <span class="number">20</span>) &#123;</span><br><span class="line">        star = <span class="keyword">new</span> starObj();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        star = twinklying.shift();</span><br><span class="line">    &#125;</span><br><span class="line">    star.reset();</span><br><span class="line">    twinklying.push(star);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>twinklying</code>是一个用<code>starObj</code>控制的伪队列，其中&quot;活着&quot;的粒子将被绘制，每当有新的粒子需求，当粒子总数超过上限，会从队列中抽取&quot;死亡&quot;的粒子初始化，重新开始生命周期。</p><h2 id="before-eof"><a class="markdownIt-Anchor" href="#before-eof"></a> BEFORE EOF</h2><p>至此这个特效的主要内容已经制作完毕了，详细代码可以在这里查看。</p><p><a href="https://github.com/oodavy41/MyToysBox/tree/master/NightWithNovae" target="_blank" rel="noopener">https://github.com/oodavy41/MyToysBox/tree/master/NightWithNovae</a></p><p>什么？你问特效在哪？把鼠标放到标题上试试？我说的是博客的大标题！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近毕设相关的项目制作终于告一段落了，人闲了下来，折腾的心也开始蠢蠢欲动。于是准备着手换掉看腻了的hexo的主题。不过当这篇文章问世时因该会发布在已经实装的新主题里了。&lt;/p&gt;
&lt;p&gt;这次也准备往博客里加点coool的特效什么的，考虑了几个方案，最后选择用canvas来做，所以本文就是canvas动画的制作记录。&lt;/p&gt;
    
    </summary>
    
    
      <category term="HTML5" scheme="http://cocolate.cc/tags/HTML5/"/>
    
      <category term="前端" scheme="http://cocolate.cc/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Canvas" scheme="http://cocolate.cc/tags/Canvas/"/>
    
      <category term="粒子动画" scheme="http://cocolate.cc/tags/%E7%B2%92%E5%AD%90%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>玩 undertele 有感</title>
    <link href="http://cocolate.cc/2017/02/21/undertele-%E4%B8%AD%E7%9A%84%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1%E4%BD%93%E4%BC%9A/"/>
    <id>http://cocolate.cc/2017/02/21/undertele-中的游戏设计体会/</id>
    <published>2017-02-21T09:55:08.000Z</published>
    <updated>2017-04-03T12:40:37.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>在重温Undertale音乐的时候胡思乱想的成果</p><p>不过游戏设计方向我完全是个门外汉，这些只是我凭借游戏经验来摸索出的一些规律了。</p><p>想到哪儿写到哪儿，看做瞎扯就行。</p><p>TobyFox毫无疑问是个天才，Undertale只是他做的第一个游戏</p><p>天才创造经验，供凡人传颂。_(:3」∠)_</p><a id="more"></a><h3 id="用游戏的方式刻画人物"><a class="markdownIt-Anchor" href="#用游戏的方式刻画人物"></a> 用游戏的方式刻画人物</h3><p>undertale基本掀起了游戏界最大的同人创作热潮。这离不开TF对各个NPC的着力刻画。</p><p>有血有肉的人物自然更能引起玩家的好恶，随之可以带来话题性并被广泛传播。</p><p>相比之下，优秀的剧本在这方面无力很多。</p><p>精妙剧本带来的大多是理性层面的体验，而丰满的NPC带来的则是感性层面的好感/恶感。</p><p>就会有 <em>我要安利我控记不住我记几啊</em> 的现象。</p><p>一个游戏，给玩家带来的体验是由四部分组成的：</p><ul><li>画面</li><li>音乐</li><li>文字</li><li>交互</li></ul><p>大多数游戏都靠着前三部分进行故事推进和人物描写，或者弱交互（如qte，对话选择等）</p><p>对人的感官大多数和看视频一样。当然将前三者做的很好也可以造就一个优秀的游戏，我们称之为互动电影，以及电影化叙事。</p><p>Undertale虽然画质不行，但四方面都恰到好处，对人物的刻画起到了足够的作用。我们一个一个说。</p><h4 id="音乐"><a class="markdownIt-Anchor" href="#音乐"></a> 音乐</h4><p>作为一个音乐人，TF的游戏中配乐毫无疑问水准很高。</p><p>网上分析Undertale的文章之多，足以说明问题。</p><p>一般评价游戏音乐，只要“不出戏”就不会扣分。而优秀游戏的音乐注意了氛围的烘托。</p><p>TF的音乐则加入了NPC的性格，在不同场景，不同路线的NPC背景音乐既互相关联，又有所不同。</p><h4 id="画面"><a class="markdownIt-Anchor" href="#画面"></a> 画面</h4><p>很多人玩游戏追求画质，其实不然，一个好游戏靠的是艺术风格的特色统一。</p><p>其中包括：音乐、文字、画面特效（不是画质）、和交互</p><p>画质多数是3D处理（光线处理，场景细节），而画面特效多数是屏幕处理（灰度化，反色）</p><p>游戏的信息传递不能被画面局限，但也就仅此而已。</p><p>对玩家来说，画质是一种“认知”，而特效是一种“感觉”，也就是理性与感性的区别。</p><p>作为游戏，应该让玩家感同身受，而不是照本宣科。</p><p>Undertale的脸谱化做得不错，至少体现了人物性格。而表情则做得非常传神，而且是在1bit像素下。</p><h4 id="文字"><a class="markdownIt-Anchor" href="#文字"></a> 文字</h4><p>Undertale的文字参考了AVG的展示方式。用旁白或独白的形式进一步烘托游戏氛围。（个人印象最深是鱼姐那里）</p><p>如上所说，Undertale在叙事中着力刻画了人物形象，并不是说它的剧情不行，而是人物刻画非常突出。</p><p>突出人物刻画是非常讨巧的做法，不只是游戏，在ACGN圈普遍现象就是对人物的喜爱完全超过对剧情的喜爱。</p><p>除此之外的加分项是游戏里让人会心一笑的许多细节和梗。</p><h4 id="交互"><a class="markdownIt-Anchor" href="#交互"></a> 交互</h4><p>游戏有别于其他艺术形式最大的不同就是与玩家的交互性。在游戏半个世纪的发展历程中，已经有诸多艺术家早早意识到并着力于游戏的交互方面的创新。</p><p>undertale当然不是最早的一个，但是他算得上最有影响力的作品之一，并在交互方面探索出了自己的道路。</p><p>在游戏中，交互普遍分为两种，战斗的交互与战斗之外的交互。</p><p>后者通常用于推进剧情，作出分支，也包括移动、触发等动作，而战斗则是为了达到目的进行的对抗类操作</p><p>在如今的游戏中，两种交互都非常常见，也渐渐地开始发展出融合变种。比如多见于潜入游戏的选择 制服 或 杀死 来产生剧情分支的设定。</p><p>也就是利用战斗进行叙事，来加深玩家的代入感。上面也说到了，Undertale的叙事更多为NPC塑造服务，战斗交互同样如此。</p><p>比起其他游戏普遍的一个BOOS一个打法，Undertale称得上是一个BOOS一个玩法。每个boos战都可以算一个新的小游戏。</p><p>战斗形式的设计也充分体现了NPCBOOS的个性（第一次打羊妈看到弹幕躲着我的时候真的惊了）</p><p>我们常说，游戏制作最重要的是风格统一。而这个统一，在大多数游戏里表现为经典艺术处理（美术音乐与文案风格）的统一。<br>而Undertale为我们揭示了一条新的道路，就是补充上对于交互的处理，而效果已经显而易见了。<br>当然，这是一个类型题材较为特殊的游戏，对于这部分的理念如何应用到更多的游戏类型，还有待诸位发掘。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在重温Undertale音乐的时候胡思乱想的成果&lt;/p&gt;
&lt;p&gt;不过游戏设计方向我完全是个门外汉，这些只是我凭借游戏经验来摸索出的一些规律了。&lt;/p&gt;
&lt;p&gt;想到哪儿写到哪儿，看做瞎扯就行。&lt;/p&gt;
&lt;p&gt;TobyFox毫无疑问是个天才，Undertale只是他做的第一个游戏&lt;/p&gt;
&lt;p&gt;天才创造经验，供凡人传颂。_(:3」∠)_&lt;/p&gt;
    
    </summary>
    
    
      <category term="游戏设计" scheme="http://cocolate.cc/tags/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>从零开始的webgl渲染引擎</title>
    <link href="http://cocolate.cc/2016/12/04/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84webgl%E6%B8%B2%E6%9F%93%E5%BC%95%E6%93%8E/"/>
    <id>http://cocolate.cc/2016/12/04/从零开始的webgl渲染引擎/</id>
    <published>2016-12-04T04:29:57.000Z</published>
    <updated>2018-10-15T09:07:29.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h2 id="这是我的毕设题目考虑到查重这一系列暂时不做更新-等我毕业吧-这里有项目地址"><a class="markdownIt-Anchor" href="#这是我的毕设题目考虑到查重这一系列暂时不做更新-等我毕业吧-这里有项目地址"></a> 这是我的毕设题目，考虑到查重，这一系列暂时不做更新。等我毕业吧。<br><a href="https://github.com/oodavy41/RLYEH" target="_blank" rel="noopener">这里</a>有项目地址</h2><h3 id="update"><a class="markdownIt-Anchor" href="#update"></a> update</h3><p>经过一段时间的开发，感受到一个引擎最大的难点在于工程部分。而这基本无法用语言描述，只能参考现有项目。<br>剩下的诸如数学知识、API的调用顺序等等，互联网上已经有很多教程了。<br>将来有空我可能会写一系列精简版指南，用于快速在网页上使用WEBGL</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css&quot;&gt;&lt;h2 id=&quot;这是我的毕设题目考虑到查重这一系列暂时不做
      
    
    </summary>
    
    
      <category term="WebGL" scheme="http://cocolate.cc/tags/WebGL/"/>
    
      <category term="图形学" scheme="http://cocolate.cc/tags/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
      <category term="JavaScript" scheme="http://cocolate.cc/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>随机迷宫生成算法整理分析</title>
    <link href="http://cocolate.cc/2016/09/20/%E9%9A%8F%E6%9C%BA%E8%BF%B7%E5%AE%AB%E7%AE%97%E6%B3%95%E6%95%B4%E7%90%86/"/>
    <id>http://cocolate.cc/2016/09/20/随机迷宫算法整理/</id>
    <published>2016-09-20T04:52:39.000Z</published>
    <updated>2018-10-10T15:30:59.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>本文所有代码可在<a href="http://github.com/oodavy41/randomMapDemo" target="_blank" rel="noopener">项目地址</a>查看</p><p>上学期的游戏开发期末作业做了一个Roguelike恐怖游戏，学习整理了一些资料，对于此篇文章的想法由来已久。<br>由于后来暑假搞服务外包大赛搁置了一段时间，如今诸多事务告一段落，终于有空玩一玩自己的东西。</p><p>最早接触Roguelike是从以撒开始，虽然就生成地形的艺术性上Roguelike的特定规则不如类似MineCraft的模拟自然壮丽。但与特定规则配合带来的无穷游戏性却是诸多类型中无二的。过程化生成永远是游戏技术界的一颗明珠，然而在摘得明珠的那一刻，或许游戏设计就不复存在了。</p><h2 id="第一种算法"><a class="markdownIt-Anchor" href="#第一种算法"></a> 第一种算法</h2><p>先上一张图</p><p><img src="http://o6qwciia9.bkt.clouddn.com/1.png" alt=""></p><p>这是我最早拍脑袋凭着感觉写的一个算法结果，给定区域长宽和分支概率，可以生成一张迷宫图。</p><a id="more"></a><p>这完全就是随机挖洞大法，其步骤如下：</p><ol><li>计算当前扫描点周围可以挖的方块</li><li>随机选一个方块挖开</li><li>若周围还有可挖方块，按分支概率随机挖开另一方块，设为新扫描点</li><li>所有扫描点执行 <code>1</code> 操作</li><li>若周围无方块可挖，中止此扫描点工作。</li></ol><p>可以看出，这个算法有相当的缺陷，生成的迷宫总面积不可控，在运气不好的极端情况下，会产生比预期面积小很多的迷宫。<br>即使我们将分支概率调到100%，依旧会有黑色的空洞存在：</p><p><img src="http://o6qwciia9.bkt.clouddn.com/13.png" alt=""></p><ul><li>而且生成的迷宫非常扭曲怪诞，这很克苏鲁。或许我们可以风格化一下……</li></ul><p>此时的迷宫已经勉强可以使用，但是与传统迷宫的差别依旧非常大。<br>它的斜线非常多。这会使得游戏过程中包含八个方向，对玩家的方向感是极大的考验，很难再记住地图，容易晕头转向。</p><p>对于这个算法，相比室内环境，更适合生成自然环境下迷宫。也可以作为无主线、弱主线沙盘游戏的大地图生成的一环。</p><h2 id="递归分割"><a class="markdownIt-Anchor" href="#递归分割"></a> 递归分割</h2><p>接下来这个算法与第一个就是两个极端——生成完全没有斜线的迷宫。<br>话不多说，先上图：</p><p><img src="http://o6qwciia9.bkt.clouddn.com/21.png" alt=""></p><ul><li>迷人的大迷宫</li></ul><p>在介绍本算法前，需要提出一个概念</p><p>完美迷宫Perfect maze：没有回路，也没有孤立区域的迷宫。用图论来解释，就是可以用生成树表示的迷宫，迷宫中两点有且仅有一条路径。</p><p>这个算法是一个分治算法，即将一块大的生成区域分成4块小区域分别生成迷宫并保证联通，以此类推，直到不可细分。</p><p>分块很简单，长宽上各取一个随机数即可。如何保证迷宫完美呢？<br>我们看极端情况，对于一个田字形区域，生成完美迷宫的方法是敲开三堵墙。</p><p>利用分治算法的特性，每一层递归都是完美迷宫，直到全图生成完美迷宫。<br>算法不难，注意递归状态的边界情况就行。</p><p>这种分治递归的痕迹在生成的地图俯视图上很明显，但对于置身其中的玩家或许就不是了。</p><p>它生成的迷宫完全没有斜线，横平竖直，同时会生成4*4的小房间。<br>用作城市地图、或建筑环境的迷宫非常合适。</p><p>当然在游戏中地图没有回路是非常致命的，一个完美迷宫会让玩家疲于奔命，并不方便设计玩法。<br>对于回路，我们只需要消除死路就行了，也就是那些三面临墙的格子，在地图生成完后遍历死路，按一定概率打通即可。</p><h1 id="生成树算法-kruskal-prim"><a class="markdownIt-Anchor" href="#生成树算法-kruskal-prim"></a> 生成树算法 Kruskal &amp; Prim</h1><p>绝大多数的编程问题都可以用数学工具解决，当然我们的迷宫生成算法也不例外。<br>数学中最适合表达迷宫的符号莫过于 <code>图</code>，下面两个算法是迷宫生成中应用最普遍的理论之二。</p><p>首先我们需要将地图转换为便于数学表达的形式。<br>之前两个算法在处理地图时都是以 <code>方块</code> 为单位的，即每一个方块不是墙就是路。<br>而 <code>图</code> 的基本组成是 <code>点</code> 与 <code>边</code> ，对于一个待处理的迷宫，我们做如下转换。</p><p><img src="http://o6qwciia9.bkt.clouddn.com/3.png" alt=""></p><p>迷宫大小10*10，其中白块代表 <code>点</code>，红块代表 <code>边</code>，而黑块代表 <code>虚无</code>，只是填充物质罢了。</p><p>如果一个 <code>图</code> 中，任意两 <code>点</code> 都能通过 <code>边</code> 组成的路径联通，称之为 <code>连通图</code>。</p><p>而如果一个 <code>连通图</code> 上没有回路，则我们可以称之为 <code>树</code>，因为没有回路，所以每对点之间有且仅有一条路径联通。</p><p>可以看到，<code>树</code> 与我们完美迷宫的概念不谋而合，所以现在我们的任务是找到包含所有点的一棵 <code>树</code>。</p><h2 id="最小生成树"><a class="markdownIt-Anchor" href="#最小生成树"></a> 最小生成树</h2><p>生成树，顾名思义，就是从给定的 <code>点</code>,<code>边</code> 集合中生成一棵符合要求的树。<br>下面介绍的两种最小生成树算法都可以胜任。</p><p>虽然写作最小生成树，但这两个算法其实可以做到“按一定条件生成树”。<br>“最小”是算法的典型描述，即在有权边的集合中找出权值最小的树。原算法使用贪心算法求解。</p><p>而在这里，我们的条件就是：随机。</p><p>下面简单介绍一下这两个算法的步骤：</p><p>两个算法都需要 <code>点</code> 的集合<code>E</code>,与 <code>边</code> 的集合<code>V</code>。对于上图，<code>E</code>代表所有白块，<code>V</code>代表所有红块</p><p>Kruskal：<br>一开始每个点将自己作为单独的一棵树。</p><ol><li>从<code>V</code>中随机选出一条边<code>v</code></li><li>判断<code>v</code>两端的<code>e1</code>，<code>e2</code>是否属于一棵生成树<ul><li>是，无动作</li><li>否，绘制<code>e1</code>,<code>v</code>,<code>e2</code>并合并树</li></ul></li><li>从<code>V</code>中删除<code>v</code></li><li>当<code>V</code>不为空，则返回 1. ，<code>V</code>为空则完成</li></ol><p>ps:判断与合并两点所在树可以使用并查集相关算法，在项目代码中UFset类就是并查集的c#实现之一</p><p>这里简单讲下并查集，并查集是指一些不相交集合的 <code>合并</code> 与 <code>查询</code> 问题，</p><p>对应到我们迷宫问题中就是：合并不相连的生成树、查找两点是否属于同一个生成树。</p><p>并查集使用了一种称为 <code>路径压缩</code> 的算法，使得所有子节点的父节点均指向跟根节点。</p><p>虽然压缩算法是为了提高合并效率，但压缩算法本身时间复杂度也是O(n)，所以我们只在查询一个节点时，才对此节点所在路径进行压缩，并且在合并时，将小树并入大树，以平衡效率。</p><p>经过优化的并查集合并算法时间复杂度在统计上可以神奇的接近常数级，比起之前的全图标记不知道高到哪里去了，证明就在此略过，有兴趣的同学可以去深入学习一下。</p><p>Prim：初始<code>V</code>为空，所有<code>e</code><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding="application/x-tex">\in</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.5391em;"></span><span class="strut bottom" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="base"><span class="mrel">∈</span></span></span></span><code>E</code>标记为0</p><ol><li>随机选一个点<code>e</code></li><li>将与<code>e</code>相连的边的集合<code>{Ve}</code>并入入<code>V</code>，e标记为1</li><li>从<code>V</code>中随机选一条边<code>v</code></li><li>判断v两端情况<ul><li>均为1：无动作</li><li>一个0一个1：将为0的点<code>e</code>标记为1，绘制<code>v</code>,<code>e</code>,将<code>e</code>连接的边并入<code>V</code></li><li>均为0：不可能</li></ul></li><li>从<code>V</code>中删除<code>v</code></li><li>当所有<code>e</code><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding="application/x-tex">\in</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.5391em;"></span><span class="strut bottom" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="base"><span class="mrel">∈</span></span></span></span><code>E</code>均被标记为1，结束，否则返回 3. 。</li></ol><p>ps:可以维护一个包含所有<code>v</code><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∈</mo></mrow><annotation encoding="application/x-tex">\in</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.5391em;"></span><span class="strut bottom" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="base"><span class="mrel">∈</span></span></span></span><code>V</code>的标记表，防止被重复并入<code>V</code>，提高效率</p><p>以上为算法步骤，建议配合代码食用更佳。</p><p>下为运行结果</p><p><img src="http://o6qwciia9.bkt.clouddn.com/4.png" alt=""><br><img src="http://o6qwciia9.bkt.clouddn.com/5.png" alt=""></p><p>前者为Kruskal，后者为Prim。白路黑墙。</p><p>可以看到两个算法的生成迷宫风格几乎一样，并且都较为接近传统迷宫。可以用于各类需要迷宫生成的游戏。</p><p>值得一提的是这两个算法都可以加入房间，只需将房间预先生成，在将剩余可生成的点与边的集合放入算法中运行即可。<br>关于这个详细可以参考<a href="http://indienova.com/indie-game-development/rooms-and-mazes-a-procedural-dungeon-generator/" target="_blank" rel="noopener">房间和迷宫：一个地牢生成算法</a></p><p>到这里关于游戏中迷宫生成最常用的几个算法已经写完了。除了上述几种以外，迷宫的生成方法还深度广度优先搜索之类很多。<br>此外还有诸多适用于特定游戏系统的地图生成算法，如MC中的噪音，<a href="http://indienova.com/indie-game-development/handcrafted-feel-dungeon-generation-unexplored-explores-cyclic-dungeon-generation/" target="_blank" rel="noopener">Unexplored</a>中的环状地图等</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文所有代码可在&lt;a href=&quot;http://github.com/oodavy41/randomMapDemo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;项目地址&lt;/a&gt;查看&lt;/p&gt;
&lt;p&gt;上学期的游戏开发期末作业做了一个Roguelike恐怖游戏，学习整理了一些资料，对于此篇文章的想法由来已久。&lt;br&gt;
由于后来暑假搞服务外包大赛搁置了一段时间，如今诸多事务告一段落，终于有空玩一玩自己的东西。&lt;/p&gt;
&lt;p&gt;最早接触Roguelike是从以撒开始，虽然就生成地形的艺术性上Roguelike的特定规则不如类似MineCraft的模拟自然壮丽。但与特定规则配合带来的无穷游戏性却是诸多类型中无二的。过程化生成永远是游戏技术界的一颗明珠，然而在摘得明珠的那一刻，或许游戏设计就不复存在了。&lt;/p&gt;
&lt;h2 id=&quot;第一种算法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#第一种算法&quot;&gt;&lt;/a&gt; 第一种算法&lt;/h2&gt;
&lt;p&gt;先上一张图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o6qwciia9.bkt.clouddn.com/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这是我最早拍脑袋凭着感觉写的一个算法结果，给定区域长宽和分支概率，可以生成一张迷宫图。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Unity" scheme="http://cocolate.cc/tags/Unity/"/>
    
      <category term="C#" scheme="http://cocolate.cc/tags/C/"/>
    
      <category term="随机迷宫" scheme="http://cocolate.cc/tags/%E9%9A%8F%E6%9C%BA%E8%BF%B7%E5%AE%AB/"/>
    
      <category term="游戏算法" scheme="http://cocolate.cc/tags/%E6%B8%B8%E6%88%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>在Unity中通过网络API实现原生语音识别与自动检测识别</title>
    <link href="http://cocolate.cc/2016/05/06/%E5%9C%A8Unity%E4%B8%AD%E9%80%9A%E8%BF%87%E7%BD%91%E7%BB%9CAPI%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%94%9F%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E4%B8%8E%E8%87%AA%E5%8A%A8%E6%A3%80%E6%B5%8B%E8%AF%86%E5%88%AB/"/>
    <id>http://cocolate.cc/2016/05/06/在Unity中通过网络API实现原生语音识别与自动检测识别/</id>
    <published>2016-05-06T07:30:06.000Z</published>
    <updated>2016-08-12T09:45:06.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p> 最近在做一个增强现实APP，为了方便3D处理使用了Unity作为开发工具。</p><p> 结果在实现语音识别功能时被卡住了，Unity上并没有语音识别的插件_(:3」∠)_。原本想来语音功能已经十分成熟，应该有很多工具可以调用，然而诸多公司有几乎全平台的SDK却没有Unity（明明只是请求服务器，偏偏都要封装）。</p><p> 好在最后找到了百度的rest方案，直接把web接口暴露给我们了，可以直接使用网络请求进行语音传输和识别，Unity的网络功能自然是没问题，现在4G普及各种环境网速也能跟上了。至此Unity原生语音识别理论上成立了。</p><a id="more"></a><p> 这篇文章大部分信息参考<a href="http://docs.unity3d.com" target="_blank" rel="noopener">Unity官方文档</a>，由于我上手Unity也不久，不可避免会产生谬误差错，欢迎指出，若有区别以官方为准。</p><p> 做语音识别首先需要获取语音，Unity中有现成的方法获取麦克风音频，往MainCamera上添加个AudioSource就可以接受麦克风的录制数据:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aud.clip = Microphone.Start(Microphone.devices[<span class="number">0</span>], <span class="literal">true</span>, <span class="number">600</span>, <span class="number">8000</span>);</span><br></pre></td></tr></table></figure><p><code>aud</code>是AudioSource，<code>clip</code>是其中待播放的剪辑，<code>Microphone.Start</code>顾名思义，录音开始，包含四个参数：</p><ul><li>第一个是录音麦克风的名字。<code>Microphone.devices</code>可以获取当前麦克风名称的数组，我们只有一个麦克风所以直接获取了第一个的名字</li><li>第二个是和第三个相关，第三个参数是录制长度，这里是10分钟。至于这么长时间和下半部分自动识别有关。第二个参数是个flag，选择是否循环录音，即录制满10分钟后将录音首部开始覆盖。</li><li>最后一个是录音采样率，这里使用8000是百度语音识别API的要求</li></ul><p> 现在语音数据已经在<code>AudioSource</code>里了，下一步就是把它发送给百度。<br> <code>AudioSource.Clip</code>有个<code>GetData</code>方法，可以将录音读出：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aud.clip.GetData(talk, recStart);</span><br></pre></td></tr></table></figure><p> 它有两个参数，<code>talk</code>是导出数据的数组，需要预先设置大小；<br> <code>recStart</code>则表示导出数据的起始位置，我们的录音采样频率设置为了8000，则每秒数组会增大8000个float，你需要录音开始n秒以后的数据就是<code>recStart=n*8000</code>，这是后文自动识别的关键。</p><p> 数据格式是<code>float[]</code>,范围[-1,1],这样的的非标准格式数据显然不能被用作识别，我们需要将之转换，Unity中录音数据转wav格式网上有不少，就不上代码了，也可以参考文末给出的demo。</p><p> 完成了转码后，就可以着手生成Json发送进行语音识别了，关于百度的API具体可参看<a href="http://yuyin.baidu.com/docs/asr/54" target="_blank" rel="noopener">百度语音文档中心</a>。</p><p> 使用百度API需要注册应用，并获取access_token，才会响应。注意百度的语音识别数据要求使用Base64编码。<br>Json结构：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">postObj jsonObj = <span class="keyword">new</span> postObj()</span><br><span class="line">        &#123;</span><br><span class="line">            format = <span class="string">"格式，这里是wav"</span>,</span><br><span class="line">            rate = <span class="number">8000</span>,</span><br><span class="line">            channel = <span class="number">1</span>,</span><br><span class="line">            lan=<span class="string">"语种zh、en等"</span>,</span><br><span class="line">            token = <span class="string">"你的access_token"</span>,</span><br><span class="line">            cuid = <span class="string">"识别码，可以自己随便填"</span>,</span><br><span class="line">            len=语音长度，单位<span class="keyword">byte</span>,</span><br><span class="line">            speech=Base64后的语音数据</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure><p> 成功后百度会返回如下格式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"corpus_no"</span>: <span class="string">"6281514336740510412"</span>, </span><br><span class="line">    <span class="attr">"err_msg"</span>: <span class="string">"success."</span>, </span><br><span class="line">    <span class="attr">"err_no"</span>: <span class="number">0</span>, </span><br><span class="line">    <span class="attr">"result"</span>: [</span><br><span class="line">        <span class="string">"soccer, "</span>, </span><br><span class="line">        <span class="string">"a soccer, "</span></span><br><span class="line">    ], </span><br><span class="line">    <span class="attr">"sn"</span>: <span class="string">"933206695561462529026"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 至此Unity的语音识别功能已经实现了，但是Unity的录音函数录音长度是需要确定的，也需要触发，如果每次语音识别都需要用户开关，显然很麻烦，接下来我们来实现自动识别语音。</p><p> 要实现自动识别，就要判断用户何时在讲话，<code>GetData</code>的给出的float数据是每个音频采样点的响度，随着时间的推移组合出复杂的音频波形，对于我们来说可以简单设置采样阈值。在一段时间内，平均响度数据高于此则判断用户在说话，将录音输出，直到用户停止讲话。这个判断需要定时循环执行，对于Unity来说，可以直接使用<code>update</code>函数方便地实现。</p><p>在这里我们需要另一个<code>MicroPhone</code>方法：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">currP = Microphone.GetPosition(mcName);</span><br></pre></td></tr></table></figure><p>这个函数返回int数据表示录音进度当前的位置。</p><p> 在每个<code>update</code>内判断用户是否说话，要是开始说话就记录下当前时间为起始位置，进入录音状态，当用户结束讲话，记录下结束位置。而用户这次的语音数据就在<code>Clip</code>记录的录音数组中两个位置之间。</p><p> 至此实时识别已经初具雏形，我们还需要优化几个点</p><ul><li>判断时间的间隔不宜过短，会导致语音中自带的轻音，停顿被识别，语音被断开，导致失败。</li><li>考虑到各类情况，需要在计算机判断的结果前后加上缓冲区，防止语音头尾被平均，不识别。</li></ul><p>最后完善的实时识别如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> currP, lastP;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> recStart;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">bool</span> isRec = <span class="literal">false</span>, Speaking = <span class="literal">false</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">float</span> voiceLevel = <span class="number">0.001</span>f;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">bool</span> isSpeak = <span class="literal">false</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">float</span> time;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">float</span> deltaT = <span class="number">0.2</span>f;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> timeback = <span class="number">0</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">Update</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       time -= Time.deltaTime;</span><br><span class="line">       <span class="keyword">if</span> (time &lt; <span class="number">0</span>)</span><br><span class="line">       &#123;</span><br><span class="line">           time = deltaT;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (isRec)</span><br><span class="line">           &#123;</span><br><span class="line">               lastP = currP;</span><br><span class="line">               currP = Microphone.GetPosition(mcName);</span><br><span class="line">               <span class="keyword">int</span> audioL = currP - lastP;</span><br><span class="line">               <span class="keyword">if</span> (audioL &lt;= <span class="number">0</span>)</span><br><span class="line">                   <span class="keyword">return</span>;</span><br><span class="line">               <span class="keyword">float</span>[] tickAudio = <span class="keyword">new</span> <span class="keyword">float</span>[audioL - <span class="number">1</span>];</span><br><span class="line">               aud.clip.GetData(tickAudio, lastP);</span><br><span class="line">               <span class="keyword">float</span> loudness = coculateLoud(tickAudio);</span><br><span class="line">               isSpeak = loudness &gt; voiceLevel;</span><br><span class="line">               <span class="comment">//Debug.Log(loudness);</span></span><br><span class="line">               <span class="keyword">if</span> (!isSpeak)</span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="keyword">if</span> (Speaking)</span><br><span class="line">                   &#123;</span><br><span class="line">                       timeback = <span class="number">3</span>;</span><br><span class="line">                       Speaking = <span class="literal">false</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">else</span></span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="keyword">if</span> (!Speaking)</span><br><span class="line">                   &#123;</span><br><span class="line">                       Speaking = <span class="literal">true</span>;</span><br><span class="line">                       recStart = lastP<span class="number">-4000</span>;</span><br><span class="line">                       <span class="keyword">if</span> (recStart &lt; <span class="number">0</span>)</span><br><span class="line">                           recStart = <span class="number">0</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (timeback-- == <span class="number">1</span>)</span><br><span class="line">               &#123;</span><br><span class="line">                   timeback = <span class="number">0</span>;</span><br><span class="line">                   <span class="keyword">float</span>[] talk = <span class="keyword">new</span> <span class="keyword">float</span>[currP - recStart - <span class="number">1</span>];</span><br><span class="line">                   aud.clip.GetData(talk, recStart);</span><br><span class="line">                   <span class="keyword">this</span>.paly(talk);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后本例的demo地址<a href="https://github.com/oodavy41/Unity-Realtime-SpeechRecognition/" target="_blank" rel="noopener">Unity-Realtime-SpeechRecognition</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 最近在做一个增强现实APP，为了方便3D处理使用了Unity作为开发工具。&lt;/p&gt;
&lt;p&gt; 结果在实现语音识别功能时被卡住了，Unity上并没有语音识别的插件_(:3」∠)_。原本想来语音功能已经十分成熟，应该有很多工具可以调用，然而诸多公司有几乎全平台的SDK却没有Unity（明明只是请求服务器，偏偏都要封装）。&lt;/p&gt;
&lt;p&gt; 好在最后找到了百度的rest方案，直接把web接口暴露给我们了，可以直接使用网络请求进行语音传输和识别，Unity的网络功能自然是没问题，现在4G普及各种环境网速也能跟上了。至此Unity原生语音识别理论上成立了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Unity" scheme="http://cocolate.cc/tags/Unity/"/>
    
      <category term="语音识别" scheme="http://cocolate.cc/tags/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB/"/>
    
      <category term="C#" scheme="http://cocolate.cc/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>移动端WEB应用中检测与匹配手机运动轨迹的的方法</title>
    <link href="http://cocolate.cc/2016/04/24/%E7%A7%BB%E5%8A%A8%E7%AB%AFWEB%E5%BA%94%E7%94%A8%E4%B8%AD%E6%A3%80%E6%B5%8B%E4%B8%8E%E5%8C%B9%E9%85%8D%E6%89%8B%E6%9C%BA%E8%BF%90%E5%8A%A8%E8%BD%A8%E8%BF%B9%E7%9A%84%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://cocolate.cc/2016/04/24/移动端WEB应用中检测与匹配手机运动轨迹的的方法/</id>
    <published>2016-04-24T14:37:36.000Z</published>
    <updated>2018-10-10T12:39:19.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>是这学期专业创新实践的任务，做一个利用手机划出的动作来点名的web应用，当初只是一拍脑袋想出的点子，做起来却不是预想的这么简单。</p><p>做动作时每个人操作手机的姿势朝向不同导致加速度计的读取数据区别。首先需要统一坐标系，用陀螺仪数据进行校正。</p><p>手机的加速度计数据为当前手机加速度顶部方向<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base"><span class="mord mathit">x</span></span></span></span>、右侧方向<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="base"><span class="mord mathit" style="margin-right:0.03588em;">y</span></span></span></span>、屏幕向外<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>z</mi></mrow><annotation encoding="application/x-tex">z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base"><span class="mord mathit" style="margin-right:0.04398em;">z</span></span></span></span>三个方向的加速度分量</p><p>将其作为手机本身坐标系的一个向量，向世界坐标系转换</p><a id="more"></a><p>手机上获得的姿态角信息为手机各个轴向与标准姿态的偏差,我们可以将其组合为一个偏移矩阵<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.68333em;vertical-align:0em;"></span><span class="base"><span class="mord mathit" style="margin-right:0.10903em;">M</span></span></span></span><br>而为了矫正手机的加速度信息到一个标准坐标系，则可以使用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>M</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">M^{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8141079999999999em;"></span><span class="strut bottom" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="base"><span class="mord"><span class="mord mathit" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>，将数据“转回来”</p><p>旋转的数学工具可以参考图形学中的旋转矩阵<br>三维坐标系中绕三轴逆时针旋转的矩阵如下：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>M</mi><mi>α</mi></msub><mo>=</mo><mrow><mo fence="true">{</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>α</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>α</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>α</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>α</mi></mrow></mstyle></mtd></mtr></mtable><mo fence="true">}</mo></mrow></mrow><annotation encoding="application/x-tex">M_\alpha=\begin{Bmatrix}1 &amp; 0 &amp; 0 \\0 &amp; cos\alpha &amp; sin\alpha \\0 &amp; -sin\alpha &amp; cos\alpha \end{Bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:2.05002em;"></span><span class="strut bottom" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="base"><span class="mord"><span class="mord mathit" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight" style="margin-right:0.0037em;">α</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"></span></span></span></span></span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.49999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-3.15001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.30002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathit">c</span><span class="mord mathit">o</span><span class="mord mathit">s</span><span class="mord mathit" style="margin-right:0.0037em;">α</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathit">s</span><span class="mord mathit">i</span><span class="mord mathit">n</span><span class="mord mathit" style="margin-right:0.0037em;">α</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathit">s</span><span class="mord mathit">i</span><span class="mord mathit">n</span><span class="mord mathit" style="margin-right:0.0037em;">α</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathit">c</span><span class="mord mathit">o</span><span class="mord mathit">s</span><span class="mord mathit" style="margin-right:0.0037em;">α</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.49999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎭</span></span></span><span style="top:-3.15001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎬</span></span></span><span style="top:-4.30002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎫</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"></span></span></span></span></span></span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>M</mi><mi>β</mi></msub><mo>=</mo><mrow><mo fence="true">{</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>β</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>β</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>β</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>β</mi></mrow></mstyle></mtd></mtr></mtable><mo fence="true">}</mo></mrow></mrow><annotation encoding="application/x-tex">M_\beta=\begin{Bmatrix}cos\beta &amp; 0 &amp; -sin\beta \\0 &amp; 1 &amp; 0 \\sin\beta &amp; 0 &amp; cos\beta \end{Bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:2.05002em;"></span><span class="strut bottom" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="base"><span class="mord"><span class="mord mathit" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight" style="margin-right:0.05278em;">β</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"></span></span></span></span></span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.49999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-3.15001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.30002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathit">c</span><span class="mord mathit">o</span><span class="mord mathit">s</span><span class="mord mathit" style="margin-right:0.05278em;">β</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathit">s</span><span class="mord mathit">i</span><span class="mord mathit">n</span><span class="mord mathit" style="margin-right:0.05278em;">β</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathit">s</span><span class="mord mathit">i</span><span class="mord mathit">n</span><span class="mord mathit" style="margin-right:0.05278em;">β</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathit">c</span><span class="mord mathit">o</span><span class="mord mathit">s</span><span class="mord mathit" style="margin-right:0.05278em;">β</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.49999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎭</span></span></span><span style="top:-3.15001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎬</span></span></span><span style="top:-4.30002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎫</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"></span></span></span></span></span></span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>M</mi><mi>γ</mi></msub><mo>=</mo><mrow><mo fence="true">{</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>γ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>γ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>γ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>γ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn></mrow></mstyle></mtd></mtr></mtable><mo fence="true">}</mo></mrow></mrow><annotation encoding="application/x-tex">M_\gamma=\begin{Bmatrix}cos\gamma &amp; sin\gamma &amp; 0 \\ -sin\gamma &amp; cos\gamma &amp; 0\\0 &amp; 0 &amp; 1\end{Bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:2.05002em;"></span><span class="strut bottom" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="base"><span class="mord"><span class="mord mathit" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight" style="margin-right:0.05556em;">γ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"></span></span></span></span></span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.49999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-3.15001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.30002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathit">c</span><span class="mord mathit">o</span><span class="mord mathit">s</span><span class="mord mathit" style="margin-right:0.05556em;">γ</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathit">s</span><span class="mord mathit">i</span><span class="mord mathit">n</span><span class="mord mathit" style="margin-right:0.05556em;">γ</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathit">s</span><span class="mord mathit">i</span><span class="mord mathit">n</span><span class="mord mathit" style="margin-right:0.05556em;">γ</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathit">c</span><span class="mord mathit">o</span><span class="mord mathit">s</span><span class="mord mathit" style="margin-right:0.05556em;">γ</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.49999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎭</span></span></span><span style="top:-3.15001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎬</span></span></span><span style="top:-4.30002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎫</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"></span></span></span></span></span></span></span></span></span></span></p><p>若传感器数据依次为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base"><span class="mord mathit" style="margin-right:0.0037em;">α</span></span></span></span>,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="base"><span class="mord mathit" style="margin-right:0.05278em;">β</span></span></span></span>,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>γ</mi></mrow><annotation encoding="application/x-tex">\gamma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="base"><span class="mord mathit" style="margin-right:0.05556em;">γ</span></span></span></span><br>则<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>M</mi><mi>T</mi></msup><mo>=</mo><msub><mi>M</mi><mi>γ</mi></msub><mo>∗</mo><msub><mi>M</mi><mi>β</mi></msub><mo>∗</mo><msub><mi>M</mi><mi>α</mi></msub></mrow><annotation encoding="application/x-tex">M^T=M_\gamma*M_\beta*M_\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8413309999999999em;"></span><span class="strut bottom" style="height:1.1274389999999999em;vertical-align:-0.286108em;"></span><span class="base"><span class="mord"><span class="mord mathit" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathit" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight" style="margin-right:0.05556em;">γ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"></span></span></span></span></span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathit" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight" style="margin-right:0.05278em;">β</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"></span></span></span></span></span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathit" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight" style="margin-right:0.0037em;">α</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"></span></span></span></span></span></span></span></span><br>计算顺序与手机给出的旋转顺序相反</p><hr><p>应用搭建在web平台上，用js编写，js可以直接提供经过积分处理的陀螺仪数据，即返回手机的实时姿态角，以及手机的实时三轴加速度，方法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"deviceorientation"</span>, fun(event1)&#123;...&#125;,<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"devicemotion"</span>,fun(event2)&#123;&#125;);</span><br></pre></td></tr></table></figure><p>这两个方法分别为浏览器添加了手机姿态角变化以及加速度变化的监听器。<br><code>event2</code>中包含有<code>event2.x</code>，<code>event2.y</code>，<code>event2.z</code>三个手机坐标系下的加速度，一目了然。</p><p>此处详细讲姿态角获取与处理<br>方法会添加一个姿态角变化的监听器，每次出现角度变化便会调用<code>fun</code>处理<br><code>fun</code>带有一个参数<code>event</code>，其中包含三个成员：<br><code>event1.alpha</code><br><code>event1.beta</code><br><code>event1.gamma</code><br>分别代表手机的三个角度值，这三个角度值的坐标系与之前提到的略有不同。</p><p><code>alpha</code>表示设备沿<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>z</mi></mrow><annotation encoding="application/x-tex">z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base"><span class="mord mathit" style="margin-right:0.04398em;">z</span></span></span></span>轴上的旋转角度，范围为0~360，这里的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>z</mi></mrow><annotation encoding="application/x-tex">z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base"><span class="mord mathit" style="margin-right:0.04398em;">z</span></span></span></span>轴永远垂直于地面向上</p><p><code>beta</code> 表示设备在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base"><span class="mord mathit">x</span></span></span></span>轴上的旋转角度，范围为-180~180。它描述的是设备由前向后旋转的情况，这里的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base"><span class="mord mathit">x</span></span></span></span>轴方向也是永远垂直于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>z</mi></mrow><annotation encoding="application/x-tex">z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base"><span class="mord mathit" style="margin-right:0.04398em;">z</span></span></span></span>轴向右，并与<code>alpha</code>相关。</p><p><code>gamma</code> 表示设备在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="base"><span class="mord mathit" style="margin-right:0.03588em;">y</span></span></span></span>轴上的旋转角度，范围为-90~90。它描述的是设备由左向右旋转的情况,同样<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="base"><span class="mord mathit" style="margin-right:0.03588em;">y</span></span></span></span>永远垂直于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base"><span class="mord mathit">x</span></span></span></span>轴向前。</p><p>这是标准的x-y-z转动，我们可以看出通过<code>-gamma</code>-&gt;<code>-beta</code>-&gt;<code>-alpha</code>可以方便地将手机坐标系转换为世界坐标系。<br>要注意的是，这里并不是按照<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base"><span class="mord mathit">x</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="base"><span class="mord mathit" style="margin-right:0.03588em;">y</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>z</mi></mrow><annotation encoding="application/x-tex">z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.43056em;vertical-align:0em;"></span><span class="base"><span class="mord mathit" style="margin-right:0.04398em;">z</span></span></span></span>轴顺序转动的，旋转需要保持与手机坐标系的一致性。<br>以下是转换函数的一个示例，使用<a href="mathjs.org">Math.JS</a>库来计算矩阵，代码中使用齐次矩阵：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rolling</span>(<span class="params">m0</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> may=[</span><br><span class="line">        [<span class="built_in">Math</span>.cos(gamma),<span class="number">0</span>,<span class="built_in">Math</span>.sin(gamma),<span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">        [<span class="built_in">Math</span>.sin(gamma)*<span class="number">-1</span>,<span class="number">0</span>,<span class="built_in">Math</span>.cos(gamma),<span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">var</span> mbx=[</span><br><span class="line">        [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>,<span class="built_in">Math</span>.cos(beta),<span class="number">-1</span>*<span class="built_in">Math</span>.sin(beta),<span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>,<span class="built_in">Math</span>.sin(beta),<span class="built_in">Math</span>.cos(beta),<span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">var</span> mcz=[</span><br><span class="line">            [<span class="built_in">Math</span>.cos(alpha),<span class="number">-1</span>*<span class="built_in">Math</span>.sin(alpha),<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="built_in">Math</span>.sin(alpha),<span class="built_in">Math</span>.cos(alpha),<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">    ];</span><br><span class="line">    m0=math.multiply(m0,may);</span><br><span class="line">    m0=math.multiply(m0,mbx);</span><br><span class="line">    m0=math.multiply(m0,mcz);</span><br><span class="line">    <span class="keyword">return</span> m0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，我们已经可以利用获取的加速度通过转换和模拟积分来粗略的获取手机的运动轨迹。<br>然而手机的加速度计不甚准确，不同机型的传感器也有好坏之分，获取数据区别很大，我们需要使用滤波器来减小误差。</p><p>在这里我们初步尝试使用中值滤波，中值滤波可以很好地去除硬件抖动并平滑曲线。<br>对于实现签到功能，我们可以直接提取一些特征点，即检测轨迹中的速度方向突变来匹配轨迹图形中的角度一致性。</p><p>用一个Array保存手机各个时间点下的加速度值以及采样之间的时间差，将之滤波后模拟积分。<br>可以得到手机的速度变化序列和空间位置序列。</p><p>计算两速度的cos可以简单判断是否产生方向突变，记录突变点的位置数据。<br>最终的轨迹就被简化成了经过几个突变点位置的折线，计算折线间的夹角即为轨迹的特征点。</p><p>以下给出提取特征点的代码，<code>arrA</code>为加速度数据，<code>arrV</code>为速度数据，<code>arrS</code>为位置数据:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">touchend</span>(<span class="params">evt</span>)</span>&#123;</span><br><span class="line">            acac=<span class="literal">false</span>;</span><br><span class="line">            arrA=midfliter(arrA);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> vxx,vyy,vzz,xx,yy,zz;</span><br><span class="line">            xx=yy=zz=vyy=vzz=vxx=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> deltaV=<span class="number">7</span>;</span><br><span class="line">            <span class="keyword">var</span> lastI=<span class="number">0</span>;</span><br><span class="line">            Sps.push([<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">            arrA.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> tdt=element[<span class="number">3</span>];</span><br><span class="line">                vxx += element[<span class="number">0</span>] * tdt;</span><br><span class="line">                vyy += element[<span class="number">1</span>] * tdt;</span><br><span class="line">                vzz += element[<span class="number">2</span>] * tdt;</span><br><span class="line">                arrV.push([vxx, vyy, vzz]);</span><br><span class="line"></span><br><span class="line">                xx += vxx * tdt;</span><br><span class="line">                yy += vyy * tdt;</span><br><span class="line">                zz += vzz * tdt;</span><br><span class="line">                arrS.push([xx, yy, zz]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(index&gt;deltaV&amp;&amp;index&gt;lastI)&#123;</span><br><span class="line">                    <span class="keyword">var</span> tcos=getcos(arrV[index-deltaV],arrV[index]);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(tcos&lt;<span class="number">0.2</span>)&#123;</span><br><span class="line">                        <span class="keyword">var</span> p=<span class="built_in">Math</span>.floor(index-deltaV/<span class="number">2</span>);</span><br><span class="line">                        Sps.push(arrS[p]);</span><br><span class="line">                        lastI=index+deltaV;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> ac3=<span class="built_in">document</span>.getElementById(<span class="string">"ac3"</span>);</span><br><span class="line">            Sps.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">element,index,array</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(index&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">var</span> a=array[index<span class="number">-2</span>];</span><br><span class="line">                    <span class="keyword">var</span> b=array[index<span class="number">-1</span>];</span><br><span class="line">                    <span class="keyword">var</span> c=array[index];</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="built_in">Math</span>.acos(</span><br><span class="line">                        getcos([b[<span class="number">0</span>]-a[<span class="number">0</span>],b[<span class="number">1</span>]-a[<span class="number">1</span>],b[<span class="number">2</span>]-a[<span class="number">2</span>]],</span><br><span class="line">                        [c[<span class="number">0</span>]-b[<span class="number">0</span>],c[<span class="number">1</span>]-b[<span class="number">1</span>],c[<span class="number">2</span>]-b[<span class="number">2</span>]])</span><br><span class="line">                        )/<span class="number">3.14</span>*<span class="number">180</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>至此已经实现了手势签到的要求，如果要求精确匹配，可以参考图像匹配算法如ICP等吗，或是引入深度学习。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;是这学期专业创新实践的任务，做一个利用手机划出的动作来点名的web应用，当初只是一拍脑袋想出的点子，做起来却不是预想的这么简单。&lt;/p&gt;
&lt;p&gt;做动作时每个人操作手机的姿势朝向不同导致加速度计的读取数据区别。首先需要统一坐标系，用陀螺仪数据进行校正。&lt;/p&gt;
&lt;p&gt;手机的加速度计数据为当前手机加速度顶部方向&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;x&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.43056em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.43056em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;、右侧方向&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;y&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.43056em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.625em;vertical-align:-0.19444em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathit&quot; style=&quot;margin-right:0.03588em;&quot;&gt;y&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;、屏幕向外&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;z&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;z&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.43056em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.43056em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathit&quot; style=&quot;margin-right:0.04398em;&quot;&gt;z&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;三个方向的加速度分量&lt;/p&gt;
&lt;p&gt;将其作为手机本身坐标系的一个向量，向世界坐标系转换&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://cocolate.cc/tags/JavaScript/"/>
    
      <category term="线性代数" scheme="http://cocolate.cc/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
  </entry>
  
</feed>
